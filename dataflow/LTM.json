{
	"name": "LTM",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TransactionsInput",
						"type": "DatasetReference"
					},
					"name": "Transactions"
				},
				{
					"dataset": {
						"referenceName": "ProductsInput",
						"type": "DatasetReference"
					},
					"name": "Products"
				},
				{
					"dataset": {
						"referenceName": "Customers",
						"type": "DatasetReference"
					},
					"name": "Customers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "output_data",
						"type": "DatasetReference"
					},
					"name": "LTM"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "join2"
				},
				{
					"name": "RemoveColumns2",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          order_id as string,",
				"          transaction_id as string,",
				"          customer_id as string,",
				"          product_id as string,",
				"          store_id as string,",
				"          quantity as integer,",
				"          order_date as string,",
				"          payment_method as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Transactions",
				"source(output(",
				"          brand_name as string,",
				"          id as string,",
				"          model_name as string,",
				"          price as integer,",
				"          type as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Products",
				"source(output(",
				"          customer_id as string,",
				"          {first name} as string,",
				"          {last name} as string,",
				"          email as string,",
				"          DOB as string,",
				"          address as string,",
				"          city as string,",
				"          region as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Customers",
				"Transactions filter(greaterOrEqual(order_date, \"2023-04-01\")) ~> filter1",
				"filter1, Products join(product_id == id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"RemoveColumns1 derive(Amount = multiply(quantity, price)) ~> derivedColumn1",
				"join1 select(mapColumn(",
				"          order_id,",
				"          transaction_id,",
				"          customer_id,",
				"          product_id,",
				"          store_id,",
				"          quantity,",
				"          order_date,",
				"          payment_method,",
				"          brand_name,",
				"          model_name,",
				"          price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
				"derivedColumn1, Customers join(RemoveColumns1@customer_id == Customers@customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          order_id,",
				"          transaction_id,",
				"          customer_id,",
				"          product_id,",
				"          store_id,",
				"          quantity,",
				"          order_date,",
				"          payment_method,",
				"          brand_name,",
				"          model_name,",
				"          price,",
				"          Amount,",
				"          {first name},",
				"          {last name},",
				"          region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns2",
				"RemoveColumns2 derive({Full name} = {first name} +\" \"+ {last name}) ~> derivedColumn2",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          brand_name as string,",
				"          id as string,",
				"          model_name as string,",
				"          price as string,",
				"          type as string,",
				"          url as string",
				"     ),",
				"     partitionFileNames:['LTM'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> LTM"
			]
		}
	}
}