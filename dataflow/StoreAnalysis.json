{
	"name": "StoreAnalysis",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TransactionsInput",
						"type": "DatasetReference"
					},
					"name": "Transactions"
				},
				{
					"dataset": {
						"referenceName": "ProductsInput",
						"type": "DatasetReference"
					},
					"name": "Products"
				},
				{
					"dataset": {
						"referenceName": "StoreInput",
						"type": "DatasetReference"
					},
					"name": "Stores"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "output_data",
						"type": "DatasetReference"
					},
					"name": "StoresRevenue"
				}
			],
			"transformations": [
				{
					"name": "StoreCount"
				},
				{
					"name": "StringtoInt"
				},
				{
					"name": "TransactionsProductJoin"
				},
				{
					"name": "RevenueColoumn"
				},
				{
					"name": "join1"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          order_id as string,",
				"          transaction_id as string,",
				"          customer_id as string,",
				"          product_id as string,",
				"          store_id as string,",
				"          quantity as string,",
				"          order_date as string,",
				"          payment_method as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Transactions",
				"source(output(",
				"          brand_name as string,",
				"          id as string,",
				"          model_name as string,",
				"          price as string,",
				"          type as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Products",
				"source(output(",
				"          address as string,",
				"          city as string,",
				"          id as string,",
				"          latitude as string,",
				"          longitude as string,",
				"          name as string,",
				"          phone as string,",
				"          rating as string,",
				"          reviews as string,",
				"          type as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Stores",
				"RevenueColoumn aggregate(groupBy(store_id),",
				"     quantity = sum(quantity),",
				"          {No of Transactions} = count(store_id),",
				"          Revenue = sum(Revenue)) ~> StoreCount",
				"TransactionsProductJoin cast(output(",
				"          quantity as integer '000',",
				"          price as integer '000'",
				"     ),",
				"     errors: true) ~> StringtoInt",
				"Transactions, Products join(product_id == id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> TransactionsProductJoin",
				"StringtoInt derive(Revenue = multiply(quantity,price)) ~> RevenueColoumn",
				"StoreCount, Stores join(store_id == id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          store_id,",
				"          quantity,",
				"          {No of Transactions},",
				"          Revenue,",
				"          city,",
				"          latitude,",
				"          longitude,",
				"          name,",
				"          rating",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
				"RemoveColumns1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          brand_name as string,",
				"          id as string,",
				"          model_name as string,",
				"          price as string,",
				"          type as string,",
				"          url as string",
				"     ),",
				"     partitionFileNames:['Store_Output'],",
				"     skipDuplicateMapInputs: true,",
				"     partitionBy('hash', 1)) ~> StoresRevenue"
			]
		}
	}
}